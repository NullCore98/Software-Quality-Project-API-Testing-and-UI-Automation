{
	"info": {
		"_postman_id": "0c6149ca-24a6-4405-a892-8edaca2cca52",
		"name": "YourStore-functionalTesting",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24007094",
		"_collection_link": "https://interstellar-astronaut-442545.postman.co/workspace/Your-Store~2b00a712-8456-48b5-9824-b484acbf4c74/collection/24007094-0c6149ca-24a6-4405-a892-8edaca2cca52?action=share&source=collection_link&creator=24007094"
	},
	"item": [
		{
			"name": "1:retrieveOnlyElectronics",
			"item": [
				{
					"name": "200_TC_001_retrieveOnlyElectronics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const expectedCategory = pm.collectionVariables.get(\"productCategory\");\r",
									"\r",
									"pm.test(\"Category equals collection variable\", function () {\r",
									"    const responseCategory = pm.response.json()[0].category; \r",
									"    pm.expect(responseCategory).to.equal(expectedCategory);\r",
									"});\r",
									"\r",
									"pm.test(\"All products retrieve have the same category\", function () {\r",
									"    const products = pm.response.json();\r",
									"    products.forEach(product => {\r",
									"        pm.expect(product.category).to.equal(expectedCategory);\r",
									"    });\r",
									"});\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"title\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"price\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"description\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"category\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"image\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"rating\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"rate\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"count\": {\r",
									"              \"type\": \"integer\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\"rate\", \"count\"]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"title\",\r",
									"        \"price\",\r",
									"        \"description\",\r",
									"        \"category\",\r",
									"        \"image\",\r",
									"        \"rating\"\r",
									"      ]\r",
									"  }\r",
									"}\r",
									"\r",
									"pm.test(\"Schema validation\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://fakestoreapi.com/products/category/{{productCategory}}",
							"protocol": "https",
							"host": [
								"fakestoreapi",
								"com"
							],
							"path": [
								"products",
								"category",
								"{{productCategory}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2:retrieveSpecificProduct",
			"item": [
				{
					"name": "200_TC_001_retrieveSpecificProduct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const expectedId = parseInt(pm.collectionVariables.get(\"productId\"));\r",
									"const expectedTitle = pm.collectionVariables.get(\"productTitle\");\r",
									"\r",
									"pm.test(\"ID and Title from response equals coleections variables\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.id).to.equal(expectedId);\r",
									"\r",
									"    pm.expect(responseJson.title).to.equal(expectedTitle);\r",
									"});\r",
									"\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"title\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"price\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"description\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"category\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"image\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"rating\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"rate\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"count\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"rate\",\r",
									"        \"count\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"title\",\r",
									"    \"price\",\r",
									"    \"description\",\r",
									"    \"category\",\r",
									"    \"image\",\r",
									"    \"rating\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Schema validation\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.jsonSchema(schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://fakestoreapi.com/products/{{productId}}",
							"protocol": "https",
							"host": [
								"fakestoreapi",
								"com"
							],
							"path": [
								"products",
								"{{productId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3:submitNewProduct",
			"item": [
				{
					"name": "201_TC_001_createNewProduct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const requestBody = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"pm.test(\"Title is the same as the request body\", function () { \r",
									"    pm.expect(pm.response.json().title).to.equal(requestBody.title);\r",
									"});\r",
									"pm.test(\"Price equals the price from request body\", function () { \r",
									"    pm.expect(pm.response.json().price).to.equal(requestBody.price);\r",
									"});\r",
									"pm.test(\"Description equals the same from request body\", function () { \r",
									"    pm.expect(pm.response.json().description).to.equal(requestBody.description);\r",
									"});\r",
									"pm.test(\"Image equals the same from request body\", function () {\r",
									"    pm.expect(pm.response.json().image).to.equal(requestBody.image);\r",
									"});\r",
									"pm.test(\"Category equals the same from request body\", function () { \r",
									"    pm.expect(pm.response.json().category).to.equal(requestBody.category);\r",
									"});\r",
									"\r",
									"\r",
									"var schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"title\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"price\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"description\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"category\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"image\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"title\",\r",
									"    \"price\",\r",
									"    \"description\",\r",
									"    \"category\",\r",
									"    \"image\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test(\"Schema validation\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"SMART TV SAMSUNG 49\",\r\n  \"price\": 299,\r\n  \"description\": \"Featuring a 49-inch Full HD (1920x1080) display. Connectivity options include built-in Wi-Fi, multiple HDMI and USB ports, and Bluetooth for easy device pairing.\",\r\n  \"category\": \"Electronics\",\r\n  \"image\": \"http://samsung.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://fakestoreapi.com/products",
							"protocol": "https",
							"host": [
								"fakestoreapi",
								"com"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4:updateImageProduct",
			"item": [
				{
					"name": "200_TC_001_updateImageProduct",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status Code es 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const requestBody = JSON.parse(pm.request.body.raw);\r",
									"const responseImageUrl = pm.response.json().image;\r",
									"\r",
									"pm.test(\"Image url is the same as the request body\", function () { \r",
									"    pm.expect(responseImageUrl).to.equal(requestBody.image);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"image\": \"https://fakeimg.pl/250x100/\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://fakestoreapi.com/products/{{productId}}",
							"protocol": "https",
							"host": [
								"fakestoreapi",
								"com"
							],
							"path": [
								"products",
								"{{productId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "productId",
			"value": "10",
			"type": "string"
		},
		{
			"key": "productTitle",
			"value": "SanDisk SSD PLUS 1TB Internal SSD - SATA III 6 Gb/s",
			"type": "string"
		},
		{
			"key": "productCategory",
			"value": "electronics",
			"type": "string"
		}
	]
}